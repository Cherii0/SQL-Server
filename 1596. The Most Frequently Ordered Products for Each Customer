================================SOLUTION============================

WITH Ranked AS (
SELECT
		counted.*,
		DENSE_RANK() OVER (PARTITION BY counted.customer_id ORDER BY no_purchased DESC) AS ranking
FROM (
		SELECT DISTINCT
				Orders.customer_id,
				Orders.product_id,
				COUNT(*) OVER (PARTITION BY customer_id, Orders.product_Id) AS no_purchased

		FROM
				Orders
) AS counted
) 
SELECT 
		Ranked.customer_id,
		Ranked.product_id,
		P.product_name
FROM
		Ranked
LEFT JOIN Products AS P ON P.product_id = Ranked.product_id
WHERE
		ranking = 1

================================QUESTION============================

Table: Customers
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| name          | varchar |
+---------------+---------+
customer_id is the column with unique values for this table.
This table contains information about the customers.

Table: Orders
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| order_id      | int     |
| order_date    | date    |
| customer_id   | int     |
| product_id    | int     |
+---------------+---------+
order_id is the column with unique values for this table.
This table contains information about the orders made by customer_id.
No customer will order the same product more than once in a single day.

Table: Products
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| product_name  | varchar |
| price         | int     |
+---------------+---------+
product_id is the column with unique values for this table.
This table contains information about the products.

Write a solution to find the most frequently ordered product(s) for each customer.
The result table should have the product_id and product_name for each customer_id who ordered at least one order.
Return the result table in any order.
