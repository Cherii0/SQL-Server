=============================SOLUTION=============================

SELECT results FROM
(

SELECT TOP 1
	U.name AS results 
FROM MovieRating AS MR
LEFT JOIN Users AS U ON U.user_id = MR.user_id
GROUP BY U.name
ORDER BY COUNT(*) DESC, name ASC

UNION ALL

SELECT TOP 1 M.title FROM (
SELECT
	movie_id,
	AVG(CAST( rating AS FLOAT)) AS rating
FROM 
	MovieRating
WHERE 
	MONTH(created_at) = 2
GROUP BY 
	movie_id
) AS movie_rating LEFT JOIN Movies AS M ON movie_rating.movie_id = M.movie_id
ORDER BY rating DESC, title

) AS results

=============================QUESTION=============================


Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.

 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
The column 'name' has unique values.

Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 

Write a solution to:
Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.
